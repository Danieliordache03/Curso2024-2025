# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

NS = Namespace("http://somewhere#")
VC = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
# TO DO
q1 = prepareQuery('''
    SELECT ?subclass
        WHERE {
                  ?subclass rdfs.subClassOf ns:LivingThing .
                  }
                  ''',
                  initNs={"ns": NS, "rdfs": RDFS}
                  )
# Visualize the results
print("Subclases de LivingThing")
for r in g.query(q1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)** """


# TO DO
q2 = prepareQuery('''
    SELECT ?individual
        WHERE {
                  ?individual rdf:type/rdfs.subClassOf ns:Person .
                  }
                  ''',
                  initNs={"ns": NS, "rdf": RDF, "rdfs": RDFS})
# Visualize the results
print("Individuos que son Person:")
for r in g.query(q2):
  print(r)
"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3= prepareQuery('''
    SELECT ?individual
        WHERE {
                { ?individual rdf:type ns:Person . } 
                 UNION 
                 { ?individual rdf:type ns:Animal .}
                 } 
                 ''',
                  initNs={"rdf": RDF, "ns": NS})

# Visualize the results
print("Individuos que son Person o Animal:")
for r in g.query(q3):
  print(r.individual)
"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
q4 = prepareQuery('''
         SELECT ?name
             WHERE {
                  ?person rdf:type ns:Person .
                  ?person foaf:knows ns:RockySmith .
                  ?person vc:Name ?name .
                  }             
                  ''', initNS={"ns": NS, "foaf": FOAF, "rdf": RDF, "vc": VC})
# Visualize the results
print("Personas que conocen a Rocky Smith")
for r in g.query(q4):
  print(r.name)
"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q5 = prepareQuery('''
        SELECT ?name
            WHERE {
                ?animal rdf:type ns:Animal .
                ?animal foaf:knows ?animal2 .
                ?animal2 rdf:type ns:Animal .
                ?animal vc:FN ?name .
                  }
                  ''',
                  initNs={"ns": NS, "rdfs": RDFS, "rdf": RDF, "foaf": FOAF, "vc": VC})
# Visualize the results
print("Animales que conocen a otro animal:")
for r in g.query(q5):
  print(r.name)
"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = prepareQuery('''
        SELECT ?livingthing ?age
            WHERE {
                ?livingthing rdf:type ns:LivingThing .
                ?livingthing foaf:age ?age .
                  }
                    ORDER BY DESC(?age)
                  ''',
                  initNs={"ns": NS, "rdfs": RDFS, "rdf": RDF, "foaf": FOAF, "vc": VC})

# Visualize the results
print("Edad de los seres vivos en orden DESC:")
for r in g.query(q6):
  print(r.age, r.livingthing)
